// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String   @map("access_token") @db.Text
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  bio           String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  image         String?

  accounts   Account[]
  sessions   Session[]
  Post       Post[]
  Comment    Comment[]
  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")
  Like       Like[]
  createdCommunity Community[]    @relation("CreatedBy")
  communities     Subscription[]

  @@map("users")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String

  @@id([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  caption     String?
  fileUrl     String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @map("user_id")

  comments Comment[]
  Like     Like[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
  // commentId String?
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([userId])
}
